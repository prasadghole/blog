#+options: ':nil -:nil ^:{} num:nil toc:nil
#+author:
#+creator: Emacs 28.2 (Org mode 9.5.5 + ox-hugo)
#+hugo_with_locale:
#+hugo_front_matter_format: toml
#+hugo_level_offset: 1
#+hugo_preserve_filling:
#+hugo_delete_trailing_ws:
#+hugo_section: posts
#+hugo_bundle:
#+hugo_base_dir: ../../
#+hugo_goldmark:
#+hugo_code_fence:
#+hugo_use_code_for_kbd:
#+hugo_prefer_hyphen_in_tags:
#+hugo_allow_spaces_in_tags:
#+hugo_auto_set_lastmod:
#+hugo_custom_front_matter:
#+hugo_blackfriday:
#+hugo_front_matter_key_replace:
#+hugo_date_format: %Y-%m-%dT%T%z
#+hugo_paired_shortcodes:
#+hugo_pandoc_citations:
#+bibliography:
#+html_container:
#+html_container_class:
#+hugo_aliases:
#+hugo_audio:
#+date: <2023-06-21 Wed>
#+description:
#+hugo_draft:
#+hugo_expirydate:
#+hugo_headless:
#+hugo_images:
#+hugo_iscjklanguage:
#+keywords:
#+hugo_layout:
#+hugo_lastmod:
#+hugo_linktitle:
#+hugo_locale:
#+hugo_markup:
#+hugo_menu:
#+hugo_menu_override:
#+hugo_outputs:
#+hugo_publishdate:
#+hugo_series:
#+hugo_slug:
#+hugo_tags:
#+hugo_categories:
#+hugo_resources:
#+hugo_type: post
#+hugo_url:
#+hugo_videos:
#+hugo_weight:

* Branching issue with git and submodule
Having submodule many times when I create branches it is much better option if all the submodule
will have same branch.


To create a branch for all the submodules in a Git repository and ensure they are synced with the newly created branch, you can follow these steps:

1. Navigate to the root directory of your Git repository in your terminal.
2. Create a new branch using the `git branch` command:
   ```shell
   git branch <new-branch-name>
   ```
3. Switch to the newly created branch using the `git checkout` command:
   ```shell
   git checkout <new-branch-name>
   ```
4. Iterate over each submodule in the repository and create the branch within each submodule:
   ```shell
   git submodule foreach 'git checkout -b <new-branch-name>'
   ```
   This command iterates over each submodule using `git submodule foreach` and executes the `git checkout -b` command to create the new branch within each submodule.
5. Push the new branch to the remote repository:
   ```shell
   git push origin <new-branch-name>
   ```
   This command pushes the new branch to the remote repository, ensuring it is available for syncing with other collaborators.
6. Update and sync the submodules with the new branch:
   ```shell
   git submodule update --remote --recursive
   ```
   This command updates the submodules to the latest commit on the new branch and ensures they are in sync with the repository.

With these steps, you can create a branch for all the submodules in your Git repository and ensure that they are synced with the newly created branch.
