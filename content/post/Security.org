#+options: ':nil -:nil ^:{} num:nil 
#+author:
#+creator: Emacs 28.2 (Org mode 9.5.5 + ox-hugo)
#+hugo_with_locale:
#+hugo_front_matter_format: toml
#+hugo_level_offset: 1
#+hugo_preserve_filling:
#+hugo_delete_trailing_ws:
#+hugo_section: posts
#+hugo_bundle:
#+hugo_base_dir: /msys64/home/pghole/blog/
#+hugo_goldmark:
#+hugo_code_fence:
#+hugo_use_code_for_kbd:
#+hugo_prefer_hyphen_in_tags:
#+hugo_allow_spaces_in_tags:
#+hugo_auto_set_lastmod:
#+hugo_custom_front_matter: :toc true :summery Notes of cybersecurity
#+hugo_blackfriday:
#+hugo_front_matter_key_replace:
#+hugo_date_format: %Y-%m-%dT%T%z
#+hugo_paired_shortcodes:
#+hugo_pandoc_citations:
#+bibliography:
#+html_container:
#+html_container_class:
#+hugo_aliases:
#+hugo_audio:
#+date: <2022-11-10 Thu>
#+description:
#+hugo_draft: true
#+hugo_expirydate:
#+hugo_headless:
#+hugo_images:
#+hugo_iscjklanguage:
#+keywords:
#+hugo_layout:
#+hugo_lastmod:
#+hugo_linktitle:
#+hugo_locale:
#+hugo_markup:
#+hugo_menu:
#+hugo_menu_override:
#+hugo_outputs:
#+hugo_publishdate:
#+hugo_series:
#+hugo_slug:
#+hugo_tags:
#+hugo_categories: #+hugo_resources:
#+hugo_type:
#+hugo_url:
#+hugo_videos:
#+hugo_weight:
#+TITLE: Notes on CyberSecurity

* Five Principals for of embedded security
** Message
 Off course this is what you want to protect from intruder.
** Integrity 
Original message sent from sender should not altered when received by receiver.

Message should not be altered during communication
** Authentication
Message should be received from intended sender party.

** Authorization
Sender of message should have be authorized to execute some action on receptor.

** Anti-replay
** Nonreduating
Sender of message should not able to disown the message.

| Principal | Method |
|-----------+--------|
| Integrity | Hash   | 



* Encryption types
** Symmetric key cryptography
*** Simple
*** Fast
** Asymmetric (public key cryptography)
*** More failsafe
*** slower

* Algorithms security levels
1. MD5 Unsecured
2. SHA-1 Unsecured

* Hash functions 
** Consistency
    Get same value for same input
** compression
Compress large data into small output range
** Lossiness
We loose information from input to output.

* Threat modeling
** What we are building 
** What can go wrong
** How we mitigate it
** How well we done our job.
STRIDE for finding threats
* GPG 
** GPG key usage
1. I want anyone receiving my email to know that I cannot repudiate it. Sign my message with private key.
2. I want to verify message I received is sent by person who say he is. Verify the signature by senders public key.
3. I want to send message which only intended recipient can read. Encrypt message with recipient public key.
4. I want to read message i received. Decrept message with your private key.

 
* FOTA
Firmware over the air. For IOT devices we need to update the firmware on the field.
** Secure boot
When system is booting it provides window of opportunities to boot different application
than expected.

* Penetration testing tools
** Firmware 
- BinWalk
- Firmadyne
- Firmwalker
- Angr
- GDB
- Radare2
- Binary Analysis tool
- Qemu

** Web
- Burp Suite
- OWASP Zed Attack proxy
- Rest plugin
- Postman Chrome extension

** Radio analysis
- Atmel RZ Raven
- Attify Badge
- HackRF one
- Yardstick one
- Ubertooth
- BLE adapter
  

* NIST Framework
National institute standards and technology provide risk based cybersecurity
framework. It consists of 5 core functions
- Identify
- Protect
- Detect
- Respond
- Recover

* PKI for embedded system
To identify if message is coming from authentic source we need to create certificate

#+begin_src shell
openssl req -x509 -newkey rsa:2048 -nodes -keyout key.pem -out cert.pem -days 365 -nodes
#+end_src

This will create
- Private key key.pem
- Public certificate cert.pem Se

  For 


* BLE security

[[https://medium.com/rtone-iot-security/deep-dive-into-bluetooth-le-security-d2301d640bfc][This medium post]]

* Network protocol security
** Protocols
*** PPP (Point to Point)
1. CHAP (Challenge response Authentication protocol)
Requires shared key hence only suitable for local preconfigued devices.
*** ARP (Address Resolution Protocol)
Used for mapping hardware addresses to network (IP) addresses.
It works by storing the hardware address and IP address mapping in tables. These
tables are updated when new hardware device is connected.
- ARP cache poisoning
  ARP do not have any authentication mechanism hence hacker device can get entry
  into ARP table by creating reply with malicious MAC address. This way packets
  send by devices will never leave the network as it is talking to non existent 
  devices.
- Smart switch (Denial of Service)
  Some smart switches goes into dumb mode when high amounts of packages are
  received hacker can bombard smart switch with many packets and convert smart
  to hub. 

  This attack can be controlled by making ARP cache static.
*** DHCP (Dynamic host configuration protocol)
This protocol is used for providing IP addresses to connected devices.
A hacking device can acts as DHCP client and drain out the address pool.
A hacking device can act as DHCP server and provide false configuration information
kj



*** SNMP (Simple network management protocol)

